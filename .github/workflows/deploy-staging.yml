name: Deploy staging environment

on:
  pull_request:
    types: [closed]
    branches:
      - staging

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ vars.GCP_CLOUD_RUN_SERVICE_STAGING }}
  REGION: ${{ vars.GCP_REGION }}
  DOCKER_IMAGE: "${{ vars.GCP_CONTAINER_REPOSITORY_STAGING }}:${{ vars.DOCKER_IMAGE_VERSION_STAGING || 'latest' }}"
  ENV: ${{ secrets.ENV_STAGING }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}

jobs:
  build-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate diff
          
      - run: git fetch origin ${{ github.base_ref }}

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker auth
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Write .env file
        run: |
          cat > src/.env <<'EOF'
          ${{ env.ENV }}
          EOF

      - name: Write Firebase credentials
        run: |
          cat > src/firebase-credentials.json <<'EOF'
          ${{ env.FIREBASE_CREDENTIALS }}
          EOF

      - name: Build image
        run: |
          docker build -f deploy/Dockerfile -t backend:latest .
          docker tag backend:latest ${{ env.DOCKER_IMAGE }}

      - name: Push image
        run: |
          docker push ${{ env.DOCKER_IMAGE }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.DOCKER_IMAGE }}
          region: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Output URL
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
